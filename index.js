const { 
  Client, 
  GatewayIntentBits, 
  ActionRowBuilder, 
  AttachmentBuilder,  
  ButtonBuilder, 
  ButtonStyle, 
  MessageFlags, 
  StringSelectMenuBuilder ,

  } = require("discord.js");
const keepAlive = require("./server");
require("dotenv").config(); // ƒê·∫£m b·∫£o b·∫°n ƒë√£ c√†i dotenv ƒë·ªÉ l·∫•y token t·ª´ .env
//require("dotenv").config({ path: "/etc/secrets/.env" }); // Render l∆∞u file ·ªü ƒë√¢y
const { processData, drawTable, drawChart, drawRatioChart } = require("./utils/readSheet");

const bot = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.MessageContent,
  ],
});

const PREFIX = "d?";

// L·∫•y gi√° tr·ªã t·ª´ bi·∫øn m√¥i tr∆∞·ªùng\
const LOG_CHANNEL_ID = process.env.LOG_CHANNEL_ID;
const REPORT_CHANNEL_ID = process.env.REPORT_CHANNEL_ID;
const LEVEL_UP_CHANNEL_ID = process.env.LEVEL_UP_CHANNEL_ID;
const ANNOUNCE_CHANNEL_ID = process.env.ANNOUNCE_CHANNEL_ID;
const greetings = ["hi", "hello", "heloo", "halo", "hey", "Bonjour"];
const cooldowns = new Map();

const conversationHistory = new Map(); // L∆∞u h·ªôi tho·∫°i theo ID tin nh·∫Øn g·ªëc
const lastRequestTime = new Map(); // L∆∞u th·ªùi gian g·ª≠i request g·∫ßn nh·∫•t

const UserXP = require("./models/UserXP");

const geminiApiKey = process.env["gemini_api_key"];
const { loadQuestions, findMatches } = require('./utils/questions');
const { chatWithGemini,sendMessageInChunks, handleReplyToBot } = require('./utils/chat');
const { loadScheduledMessages, excelTimeToISO, scheduleMessages  } = require('./utils/schedule');
const { canUseCommand } = require('./utils/cooldown');
const { createCanvas, loadImage } = require("canvas");
const { addXP, getRandom, handleDailyAutoXP } = require("./utils/xpSystem");
const { showRank, createInventoryImage, createInventoryButtons } = require("./commands/rank");
const { showLeaderboard } = require("./commands/leaderboard");
const { handleSecretRealm } = require("./commands/secretRealm");
const { 
  handleShopCommand, 
  handleConfirmSell,
  handleShopBuy, 
  handleShopSell, 
  handleBuyItemSelection, 
  handleBuyQuantitySelection, 
  handleConfirmPurchase,
  handleSellQuantitySelection
  } = require("./commands/shop");
const {
  handleUseItem,
  handleUseItemSelection,
  handleUseItemConfirm
} = require("./utils/useInventory");

// Load c√°c event
//const shopInteraction = require('./shops/interactionCreate');

const mongoose = require("mongoose");

// K·∫øt n·ªëi ƒë·∫øn MongoDB Atlas
mongoose.connect(process.env.MONGODB_URI)
.then(() => console.log("‚úÖ Connected to MongoDB Atlas"))
.catch((err) => console.error("‚ùå MongoDB connection error:", err));



// Command "/" schedule
bot.on("interactionCreate", async (interaction) => {

  if (interaction.isCommand()){
    switch (interaction.commandName) {
      case "schedule":{
        try {
            // Tr·∫£ l·ªùi ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh l·ªói timeout
            await interaction.deferReply();

            const messages = loadScheduledMessages(); // L·∫•y danh s√°ch l·ªãch tr√¨nh
            let response = "üìÖ **Danh s√°ch l·ªãch tr√¨nh ƒë√£ thi·∫øt k·∫ø:**\n";

            messages.forEach((msg, index) => {
              const timeValue = msg["Th·ªùi gian"];
              const time = new Date((timeValue - 25569) * 86400 * 1000)
                .toISOString()
                .substring(11, 16);

              response += `\n**${index + 1}.** üïí ${time}\n‚úâÔ∏è ${msg["N·ªôi dung"]}\n`;
            });

            // C·∫≠p nh·∫≠t ph·∫£n h·ªìi sau khi x·ª≠ l√Ω xong
            await interaction.editReply(response);
          } catch (error) {
            console.error("L·ªói khi x·ª≠ l√Ω l·ªánh schedule:", error);
            await interaction.followUp("‚ùå L√£o phu kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y!");
          }
        break;}
      case "profile":{
         try {
              await interaction.deferReply(); // defer tr·∫£ l·ªùi tr∆∞·ªõc (tr√°nh timeout)

              const buffer = await showRank(interaction); // l·∫•y buffer ·∫£nh t·ª´ h√†m

              const buttons = [
                new ActionRowBuilder().addComponents(
                  new ButtonBuilder()
                    .setCustomId("open_inventory")
                    .setLabel("üì¶ T√∫i tr·ªØ v·∫≠t")
                    .setStyle(ButtonStyle.Primary)
                )
              ];

            await interaction.editReply({
              files: [{ attachment: buffer, name: "profile.png" }],
              components: buttons,
            });
          } catch (error) {
            console.error("L·ªói khi hi·ªÉn th·ªã profile:", error);
            if (!interaction.replied) {
              await interaction.followUp("‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã profile.");
            }
          }
          break;
      } 
      case "leaderboard": {    
        await showLeaderboard(interaction);
        break; }
      case "bicanh": {
        try {
          await interaction.deferReply(); // ƒê·∫£m b·∫£o bot c√≥ th√™m th·ªùi gian

          const result = await handleSecretRealm(interaction);

          await interaction.editReply(result); // Tr·∫£ k·∫øt qu·∫£ sau khi x·ª≠ l√Ω xong
        } catch (error) {
          console.error("‚ùå L·ªói khi x·ª≠ l√Ω b√≠ c·∫£nh:", error);
          await interaction.editReply("üò¢ ƒê√£ x·∫£y ra l·ªói khi kh√°m ph√° b√≠ c·∫£nh. H√£y th·ª≠ l·∫°i sau.");
        }
        break; }
      case "transfer": {
        const senderId = interaction.user.id;
        const guildId = interaction.guild.id;
        const member = await interaction.guild.members.fetch(senderId);
        const displayName = member.displayName;
        const receiver = interaction.options.getUser('nguoinhan');
        const amount = interaction.options.getInteger('soluong');


        const senderMember = await interaction.guild.members.fetch(interaction.user.id);
        const senderDisplayName = senderMember.displayName;


        const now = Date.now();
        const cooldownMs = 1 * 60 * 1000; // 10 ph√∫t

        if (receiver.bot) {
          return await interaction.reply({ 
            content: "‚ùå Kh√¥ng th·ªÉ chuy·ªÉn cho bot.", 
            flags: MessageFlags.Ephemeral,
          });
        }

        if (receiver.id === senderId) {
          return await interaction.reply({ 
            content: "‚ùå Kh√¥ng th·ªÉ t·ª± chuy·ªÉn cho ch√≠nh m√¨nh.", 
            flags: MessageFlags.Ephemeral,
          });
        }

        const senderData = await UserXP.findOne({ guildId, userId: senderId });
        const receiverData = await UserXP.findOneAndUpdate(
          { guildId, userId: receiver.id },
          { $setOnInsert: { xp: 0, level: 0, stone: 0, inventory: [] } },
          { upsert: true, new: true }
        );

        if (!senderData || senderData.stone < amount) {
          return await interaction.reply({ 
            content: "‚ùå B·∫°n kh√¥ng ƒë·ªß linh th·∫°ch ƒë·ªÉ chuy·ªÉn.", 
            flags: MessageFlags.Ephemeral,
          });
        }


        if (senderData.lastTransfer && now - senderData.lastTransfer.getTime() < cooldownMs) {
          const remaining = Math.ceil((cooldownMs - (now - senderData.lastTransfer.getTime())) / 60000);
          return await interaction.reply({
            content: `‚ùå ƒê·∫°o h·ªØu c·∫ßn ch·ªù **${remaining} ph√∫t** n·ªØa m·ªõi c√≥ th·ªÉ chuy·ªÉn ti·∫øp.`, 
            flags: MessageFlags.Ephemeral,
          });
        }

        // Tr·ª´ v√† c·ªông
        senderData.stone -= amount;
        receiverData.stone += amount;
        senderData.lastTransfer = new Date();
        
        await senderData.save();
        await receiverData.save();
        

       // const logChannel = interaction.guild.channels.cache.get('LOG_CHANNEL_ID');
       const logChannel = await interaction.client.channels.fetch(LOG_CHANNEL_ID);
        if (logChannel && logChannel.isTextBased()) {
            await logChannel.send({
              content: `üìú **Log chuy·ªÉn linh th·∫°ch**\n` +
                      `Ng∆∞·ªùi g·ª≠i: ${senderDisplayName} - ${interaction.user.tag} (${interaction.user.id})\n` +
                      `Ng∆∞·ªùi nh·∫≠n: ${receiver.displayName} - ${receiver.tag} (${receiver.id})\n` +
                      `S·ªë l∆∞·ª£ng: ${amount}\n` +
                      `Th·ªùi gian: <t:${Math.floor(Date.now() / 1000)}:F>`,
            });
          } else {
            console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i log ‚Äì kh√¥ng t√¨m th·∫•y k√™nh ho·∫∑c kh√¥ng ph·∫£i k√™nh text.");
          }

        await interaction.reply({
          content: `‚úÖ ƒê·∫°o h·ªØu ƒë√£ chuy·ªÉn **${amount}** linh th·∫°ch cho ${receiver.displayName}.`,
        });
        /*
        try {
            await receiver.send(`üì• ƒê·∫°o h·ªØu v·ª´a nh·∫≠n **${amount}** linh th·∫°ch t·ª´ ${interaction.user.tag}.`);
          } catch (err) {
            console.warn("Kh√¥ng th·ªÉ g·ª≠i DM cho ng∆∞·ªùi nh·∫≠n.");
          }
        try {
            await interaction.user.send(`üì§ ƒê·∫°o h·ªØu ƒë√£ chuy·ªÉn **${amount}** linh th·∫°ch cho ${receiver.tag}.`);
          } catch (err) {
            console.warn("Kh√¥ng th·ªÉ g·ª≠i DM cho ng∆∞·ªùi g·ª≠i.");
          } */

        break;}
      case "shop": {
        try {
            await handleShopCommand(interaction); // üëà g·ªçi nh∆∞ c√°c l·ªánh kh√°c
          } catch (error) {
            console.error("L·ªói khi x·ª≠ l√Ω shop:", error);
            await interaction.reply("‚ùå L·ªói khi m·ªü c·ª≠a h√†ng.");
          }
        break; // ƒê·ªÉ l·ªánh n√†y kh√¥ng b·ªã x·ª≠ l√Ω ·ªü ph·∫ßn d∆∞·ªõi
      }
  }}

  // X·ª≠ l√Ω c√°c l·ªánh t∆∞∆°ng t√°c kh√°c
  if (interaction.isStringSelectMenu()) {
    const id = interaction.customId;
    const values = interaction.values;

    const userId = interaction.user.id;
    const guildId = interaction.guild.id;
    const userData = await UserXP.findOne({ guildId, userId });

    if (id === 'select_buy_item') {
      return handleBuyItemSelection(interaction);
    }

    // ‚úÖ X·ª≠ l√Ω ch·ªçn s·ªë l∆∞·ª£ng (hi·ªÉn th·ªã n√∫t x√°c nh·∫≠n)
    if (id === 'select_quantity_item') {
      return handleBuyQuantitySelection(interaction, userData);
    }

    //b√°n 
    if (id === "select_sell_item") {
        // Ng∆∞·ªùi ch∆°i ch·ªçn v·∫≠t ph·∫©m ‚Üí t·∫°o menu ch·ªçn s·ªë l∆∞·ª£ng
      const selectedValue = interaction.values[0]; // v√≠ d·ª•: "sell_pharmaBamboo"
      const itemId = selectedValue.replace('sell::', '');

      const userData = await UserXP.findOne({
        userId: interaction.user.id,
        guildId: interaction.guild.id
      });

      const inventoryItem = userData.inventory.find(i => i.itemId === itemId);
      if (!inventoryItem) {
        return interaction.reply({
          content: '‚ùå V·∫≠t ph·∫©m kh√¥ng c√≤n trong t√∫i.',
          ephemeral: true
        });
      }

      const row = new ActionRowBuilder().addComponents(
        new StringSelectMenuBuilder()
          .setCustomId(`select::sell::quantity::${itemId}`)
          .setPlaceholder('üßÆ Ch·ªçn s·ªë l∆∞·ª£ng mu·ªën b√°n')
          .addOptions(
            Array.from({ length: inventoryItem.quantity }, (_, i) => ({
              label: `${i + 1}`,
              value: `sell::${itemId}::${i + 1}`
            }))
          )
      );

      await interaction.update({
        content: `üí∞ ƒê·∫°o h·ªØu mu·ªën b√°n bao nhi√™u **${inventoryItem.name}**?`,
        components: [row]
      });

      return;
    
    }

    if (id.startsWith("select::sell::quantity::")) {
      const user = await UserXP.findOne({
        userId: interaction.user.id,
        guildId: interaction.guild.id,
      });
      return handleSellQuantitySelection(interaction, user); // ch·ªçn s·ªë l∆∞·ª£ng
    }



    // Ch·ªçn v·∫≠t ph·∫©m ƒë·ªÉ d√πng
    if (id === "select_use_item"){
      await handleUseItemSelection(interaction);
    }
    // Ch·ªçn s·ªë l∆∞·ª£ng v·∫≠t ph·∫©m s·ª≠ d·ª•ng
    if (id === "confirm_use_quantity"){
      const [_, itemId, quantityStr] = interaction.values[0].split("::");
      const quantity = parseInt(quantityStr);
      await handleUseItemConfirm (interaction, itemId, quantity);

    }

    const [action, itemId, quantityStr] = values[0]?.split('::') || [];
  
    if (!action || !itemId) {
      console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch gi√° tr·ªã t·ª´ SelectMenu:', values[0]);
      return;
    }

    switch (action) {
      case 'buy':
        if (quantityStr) {
          await handleConfirmPurchase(interaction, itemId, parseInt(quantityStr));
        } 
        break;

      case 'sell':
        await handleConfirmSell(interaction, itemId);
        break;
    }
  }

  // X·ª≠ l√Ω c√°c n√∫t b·∫•m
  if (interaction.isButton()) {
    const userId = interaction.user.id;
    const guildId = interaction.guild.id;
    const userData = await UserXP.findOne({ guildId, userId });
    const member = await interaction.guild.members.fetch(userId);
    const displayName = member.displayName;
    if (!userData) return;
    const id = interaction.customId;

    //const inventory = userData ? userData.inventory || [] : []; // L·∫•y t√∫i ƒë·ªì ng∆∞·ªùi ch∆°i t·ª´ DB ho·∫∑c cache
    const inventory = Array.isArray(userData.inventory) ? userData.inventory : []; // ƒê·∫£m b·∫£o inventory l√† m·∫£ng
    if (id === 'open_inventory') {
      const page = 1;
      const buffer = await createInventoryImage(displayName, userData.stone, inventory, page);
      const buttons = createInventoryButtons(page, Math.ceil(inventory.length / 3));

      await interaction.update({
        files: [{ attachment: buffer, name: 'inventory.png' }],
        components: buttons
      });
    }

    if (id.startsWith('prev_inventory_') || id.startsWith('next_inventory_')) {
      const page = parseInt(interaction.customId.split('_').pop());
      const buffer = await createInventoryImage(displayName, userData.stone, inventory, page);
      const buttons = createInventoryButtons(page, Math.ceil(inventory.length / 3));

      await interaction.update({
        files: [{ attachment: buffer, name: 'inventory.png' }],
        components: buttons
      });
    }

    if (id === "back_to_profile") {
      await interaction.deferUpdate ();
      const buffer = await showRank(interaction); // ·∫¢nh profile
        const buttons = [
        new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId('open_inventory')
            .setLabel('üì¶ T√∫i tr·ªØ v·∫≠t')
            .setStyle(ButtonStyle.Secondary)
            )
          ];
        await interaction.editReply({
        files: [{ attachment: buffer, name: 'profile.png' }],
        components: buttons
      });

    }

    if (id === 'shop_buy') {
      await handleShopBuy(interaction);
    }

    if (id.startsWith('confirm::buy::')) {
      
      const parts = id.split('::'); // ['confirm', 'buy', 'pharmaBamboo', '2']
      const quantity = parseInt(parts.pop(), 10);
      const itemId = parts.slice(2).join('::'); 
      await handleConfirmPurchase(interaction, itemId, quantity);
       
    }
    if (id === 'select_quantity_item') {
      await handleBuyQuantitySelection(interaction,userData);
    }
    if (id=== 'shop_sell') {
      await handleShopSell(interaction);
    }
    // X·ª≠ l√Ω sau khi ch·ªçn s·ªë l∆∞·ª£ng
    if (id.startsWith("confirm::sell::")) {
      const parts = id.split("::");
      const itemId = parts[2];
      const quantity = parseInt(parts[3]);

      const user = await UserXP.findOne({
        userId: interaction.user.id,
        guildId: interaction.guild.id,
      });
      return handleConfirmSell(interaction, itemId, quantity);

     }
    // D√πng v·∫≠t ph·∫©m
    if (id === 'use_item') {
      await handleUseItem(interaction);

    }
  }
});

// Ch√†o b·∫°n m·ªõi
bot.on("guildMemberAdd", async (member) => {
  const channel = member.guild.channels.cache.get(ANNOUNCE_CHANNEL_ID);
  if (channel) {
    channel.send(
      `üéâ Ch√†o m·ª´ng ƒë·∫°o h·ªØu ${member.displayName} ƒë·∫øn v·ªõi t√¥ng m√¥n!`,
    );
  }
});

// L·ªánh
bot.on("messageCreate", async (message) => {

  if (message.author.bot) return; // B·ªè qua tin nh·∫Øn t·ª´ bot kh√°c
  
  // Th∆∞·ªüng XP cho tin nh·∫Øn ƒë·∫ßu ti√™n trong ng√†y
  await handleDailyAutoXP(message.author.id, message.guild.id, message)
    // N·∫øu trong k√™nh b√≠ m·∫≠t -> c·ªông nhi·ªÅu XP h∆°n
  const isPrivateChannel = message.channel.id === process.env.PRIVATE_CHANNEL_ID;
  const xpToAdd  = isPrivateChannel ? getRandom(40, 80) : getRandom(10, 30);

  await addXP(message.author.id, message.guild.id, xpToAdd, message);

  const nickname = message.member?.displayName ||message.author.globalName|| message.author.username;
  const content = message.content.trim(); // L·∫•y n·ªôi dung tin nh·∫Øn
  const lowerContent = content.toLowerCase(); // Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ ki·ªÉm tra PREFIX
  
  //console.dir(lowerContent);
  // C·∫Øt b·ªè ph·∫ßn PREFIX m√† kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng
  const commandBody = content.slice(PREFIX.length).trim();
  const args = commandBody.split(/ +/);
  const command = args.shift()?.toLowerCase() || ""; // L·∫•y l·ªánh v√† chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng

  // üìå Ki·ªÉm tra l·ªùi ch√†o (n·∫øu tin nh·∫Øn kh√¥ng ph·∫£i l·ªánh)
  if (greetings.includes(content)) {
    message.channel.send(`Xin ch√†o ${nickname} ƒë·∫°o h·ªØu!`);
    return;
  }

    // üìå N·∫øu l√† tin nh·∫Øn reply c·ªßa bot, t∆∞∆°ng t√°c l·∫°i v·ªõi bot
  if (message.reference) {
    await handleReplyToBot(message, lastRequestTime, conversationHistory);
    return; // Tr√°nh x·ª≠ l√Ω ti·∫øp
  }
  
  // üìå Ch·ªâ x·ª≠ l√Ω c√°c l·ªánh b·∫Øt ƒë·∫ßu b·∫±ng PREFIX

 if (!lowerContent.startsWith(PREFIX.toLowerCase())) return; // Ki·ªÉm tra ti·ªÅn t·ªë b·∫•t k·ªÉ hoa/th∆∞·ªùng

  switch (command) {
    // üìå L·ªánh hi·ªÉn th·ªã danh s√°ch l·ªánh
    case "help": {
      const helpMessage = `
      **üìú Danh s√°ch l·ªánh c·ªßa l√£o phu:**
      üîπ \`d?a [T·ª´ kh√≥a]\` ‚Üí T√¨m c√¢u tr·∫£ l·ªùi theo d·ªØ li·ªáu ƒë√£ h·ªçc.
      üîπ \`d?r [T·ª´ kh√≥a]\` ‚Üí Tra c·ª©u c√πng Th√°i ·∫§t Ch√¢n Nh√¢n.
      üîπ \`/profile\` ‚Üí Th√¥ng tin c√° nh√¢n.
      üîπ \`/bicanh\` ‚Üí Tham gia th√≠ luy·ªán b√≠ c·∫£nh.
      üîπ \`/shop\` ‚Üí C·ª≠a h√†ng trao ƒë·ªïi s·∫£n ph·∫©m.
      üîπ \`/leaderboard\` ‚Üí  B·∫£ng x·∫øp h·∫°ng t√¥ng m√¥n.
      üîπ \`d?t\` ‚Üí Xem b·∫£ng d·ªØ li·ªáu ƒë·∫∑t ƒë√° g·∫ßn ƒë√¢y( t·∫°m ng·ª´ng update).
      üîπ \`d?c\` ‚Üí Xem bi·ªÉu ƒë·ªì k·∫øt qu·∫£ d·ªØ li·ªáu g·∫ßn ƒë√¢y( t·∫°m ng·ª´ng update).
      üîπ \`d?cr\` ‚Üí Xem bi·ªÉu ƒë·ªì k·∫øt qu·∫£ d·ªØ li·ªáu g·∫ßn ƒë√¢y( t·∫°m ng·ª´ng update).
      üîπ \`/schedule\` ‚Üí L·ªãch tr√¨nh l√£o M·∫°nh ƒë√£ l√™n.
      üîπ \`d?help\` ‚Üí Hi·ªÉn th·ªã danh s√°ch l·ªánh.

      üöÄ **V√≠ d·ª•:**
      - \`d?a man hoang\`
      - \`d?c\`
      `;
      message.channel.send(helpMessage);
      break;
    }

    // üìå L·ªánh h·ªèi ƒë√°p theo Excel
    case "a": {
      const query = args.join(" ").trim();
      if (!query)
        return message.channel.send(
          "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a. V√≠ d·ª•: `d?a t·∫ßn m·ª•c`",
        );

      const matches = findMatches(query, loadQuestions());
      if (matches.length > 0) {
        let response = `üîç **C√°c k·∫øt qu·∫£ cho "${query}":**\n`;
        matches.forEach((q, index) => {
          response += `\n**${index + 1}.** ‚ùì ${q["C√¢u h·ªèi"]}\n‚û°Ô∏è ${q["C√¢u tr·∫£ l·ªùi"]}\n`;
        });
        message.channel.send(response);
      } else {
        message.channel.send(
          `‚ùå Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ph√π h·ª£p, ${nickname} ƒë·∫°o h·ªØu vui l√≤ng ki·ªÉm tra l·∫°i`,
        );
      }
      break;
    }

    // üìå L·ªánh h·ªèi AI
    case "r": {
      if (!canUseCommand(message.author.id)) {
        return message.reply("‚è≥ ƒê·∫°o h·ªØu ƒëang g·ª≠i qu√° nhanh! H√£y ch·ªù 5 gi√¢y.");
      }

      const query = args.join(" ");
      if (!query)
        return message.reply("‚ö†Ô∏è ƒê·∫°o h·ªØu vui l√≤ng nh·∫≠p n·ªôi dung c√¢u h·ªèi!");
      
      // Ph·∫£n h·ªìi ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh bot c√≥ v·∫ª b·ªã lag
      const sentMessage = await message.reply("L√£o phu ƒëang suy ng·∫´m...");
   
      const reply = await chatWithGemini(query);
      // G·ªçi h√†m ƒë·ªÉ g·ª≠i tin nh·∫Øn
      await sendMessageInChunks(sentMessage, reply);
      break;
    }

    // üìå L·ªánh xem b·∫£ng d·ªØ li·ªáu 
    case "t": {
      message.channel.send(
          `‚è≥ ƒêang t·∫£i d·ªØ li·ªáu bi·ªÉu ƒë·ªì, ${nickname} ƒë·∫°o h·ªØu vui l√≤ng ch·ªù...`
      );
      processData().then((data) => {
          if (data.length === 0) {
              message.channel.send("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu trong Google Sheet.");
              return;
          }
          const recentData = data.slice(-30); // L·∫•y 30 d√≤ng cu·ªëi c√πng
                // G·ªçi h√†m ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
          const buffer = drawTable(recentData);

          if (!Buffer.isBuffer(buffer)) {
            console.error("L·ªói: drawScatterPlot kh√¥ng tr·∫£ v·ªÅ Buffer!");
            message.channel.send("‚ùå L·ªói khi t·∫°o bi·ªÉu ƒë·ªì!");
            return;
        }

          // T·∫°o attachment t·ª´ buffer
          const attachment = new AttachmentBuilder(buffer, { name: "table.png" });

          // G·ª≠i ·∫£nh v√†o k√™nh Discord
          message.channel.send({ files: [attachment] });

      }).catch((error) => {
          console.error("L·ªói khi ƒë·ªçc Google Sheets:", error);
          message.channel.send("‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu!");
      });
  
      break;
    }

    // üìå L·ªánh xem bi·ªÉu ƒë·ªì k·∫øt qu·∫£
    case "c": {
      message.channel.send(
          `‚è≥ ƒêang t·∫£i d·ªØ li·ªáu bi·ªÉu ƒë·ªì, ${nickname} ƒë·∫°o h·ªØu vui l√≤ng ch·ªù...`
      );
      processData().then((data) => {
        if (data.length === 0) {
            message.channel.send("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu trong Google Sheet.");
            return;
        }

        // G·ªçi h√†m ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
        const buffer = drawChart(data);

        if (!Buffer.isBuffer(buffer)) {
          console.error("L·ªói: drawScatterPlot kh√¥ng tr·∫£ v·ªÅ Buffer!");
          message.channel.send("‚ùå L·ªói khi t·∫°o bi·ªÉu ƒë·ªì!");
          return;
        }

        // T·∫°o attachment t·ª´ buffer
        const attachment = new AttachmentBuilder(buffer, { name: "chart.png" });

        // G·ª≠i ·∫£nh v√†o k√™nh Discord
        message.channel.send({ files: [attachment] });

      }).catch((error) => {
          console.error("L·ªói khi ƒë·ªçc Google Sheets:", error);
          message.channel.send("‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu!");
      });
  
      break;
    }
    // üìå L·ªánh xem bi·ªÉu ƒë·ªì k·∫øt qu·∫£ 2
    case "cr": {
      message.channel.send(
          `‚è≥ ƒêang t·∫£i d·ªØ li·ªáu bi·ªÉu ƒë·ªì, ${nickname} ƒë·∫°o h·ªØu vui l√≤ng ch·ªù...`
      );
      processData().then((data) => {
        if (data.length === 0) {
            message.channel.send("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu trong Google Sheet.");
            return;
        }

        // G·ªçi h√†m ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì

        const recentData = data.slice(-50);
        const buffer = drawRatioChart(recentData);

        if (!Buffer.isBuffer(buffer)) {
          console.error("L·ªói: drawScatterPlot kh√¥ng tr·∫£ v·ªÅ Buffer!");
          message.channel.send("‚ùå L·ªói khi t·∫°o bi·ªÉu ƒë·ªì!");
          return;
        }

        // T·∫°o attachment t·ª´ buffer
        const attachment = new AttachmentBuilder(buffer, { name: "chart.png" });

        // G·ª≠i ·∫£nh v√†o k√™nh Discord
        message.channel.send({ files: [attachment] });

      }).catch((error) => {
          console.error("L·ªói khi ƒë·ªçc Google Sheets:", error);
          message.channel.send("‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu!");
      });
  
      break;
    }
    default:
      message.channel.send("‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá! H√£y th·ª≠ `d?help` ƒë·ªÉ xem danh s√°ch l·ªánh.");
  }

});

bot.once("ready", async () => {
  console.log("‚úÖ Bot is now online!");
   scheduleMessages(bot);
});
bot.on('error', (err) => {
  console.error('‚ùå Discord bot error:', err);
});

keepAlive()
bot.login(process.env.DISCORD_TOKEN) // S·ª≠ d·ª•ng token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
  .catch((err) => console.error("‚ùå Login failed:", err));
