const { Client, GatewayIntentBits } = require("discord.js");
const xlsx = require("xlsx");
const keepAlive = require("./server");
require("dotenv").config(); // ƒê·∫£m b·∫£o b·∫°n ƒë√£ c√†i dotenv ƒë·ªÉ l·∫•y token t·ª´ .env
const axios = require("axios"); // Th√™m axios n·∫øu ch∆∞a c√†i ƒë·∫∑t

const geminiApiKey = process.env["gemini_api_key"]; // S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng
const bot = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.MessageContent,
  ],
});

const PREFIX = "d?";
// L·∫•y gi√° tr·ªã t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const REPORT_CHANNEL_ID = process.env.REPORT_CHANNEL_ID;
const ALLOWED_CHANNELS = process.env.ALLOWED_CHANNELS.split(","); // Chuy·ªÉn ƒë·ªïi chu·ªói th√†nh m·∫£ng
const greetings = ["hi", "hello", "heloo", "halo", "hey", "Bonjour"];
const cooldowns = new Map();

function canUseCommand(userId) {
  const now = Date.now();
  if (cooldowns.get(userId) && now - cooldowns.get(userId) < 5000) return false;
  cooldowns.set(userId, now);
  return true;
}

function loadQuestions() {
  const workbook = xlsx.readFile("questions.xlsx");
  const sheet = workbook.Sheets[workbook.SheetNames[0]];
  return xlsx.utils.sheet_to_json(sheet);
}

function findMatches(query, questions) {
  return questions.filter((q) =>
    q["C√¢u h·ªèi"].toLowerCase().includes(query.toLowerCase()),
  );
}

async function chatWithGemini(prompt) {
  try {
    const response = await axios.post(
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
      {
        contents: [
          {
            parts: [
              {
                text: prompt,
              },
            ],
          },
        ],
      },
      {
        headers: {
          "Content-Type": "application/json",
        },
        params: {
          key: geminiApiKey,
        },
      },
    );

    //console.log("Response Data:", response.data);

    const reply = response.data;

    // Ki·ªÉm tra v√† truy c·∫≠p ch√≠nh x√°c v√†o n·ªôi dung ph·∫£n h·ªìi
    if (
      !reply ||
      !reply.candidates ||
      !reply.candidates[0] ||
      !reply.candidates[0].content ||
      !reply.candidates[0].content.parts ||
      !reply.candidates[0].content.parts[0] ||
      !reply.candidates[0].content.parts[0].text
    ) {
      console.error(
        "L·ªói: Google Gemini kh√¥ng tr·∫£ v·ªÅ n·ªôi dung ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng ƒë√∫ng.",
      );
      //console.error("Full Response:", JSON.stringify(response.data, null, 2));
      return "Xin l·ªói l√£o phu kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa ƒë·∫°o h·ªØu ngay b√¢y gi·ªù.";
    }

    let content = reply.candidates[0].content.parts[0].text; // L·∫•y n·ªôi dung ph·∫£n h·ªìi
    // Thay th·∫ø "t√¥i" b·∫±ng "l√£o phu"
    content = content.replace(/t√¥i/gi, "l√£o phu");

    // Thay th·∫ø "b·∫°n" b·∫±ng "ƒë·∫°o h·ªØu"
    content = content.replace(/b·∫°n/gi, "ƒë·∫°o h·ªØu");

    return content;
  } catch (error) {
    console.error(
      " L·ªói t·ª´ Google Gemini:",
      error.response ? error.response.data : error.message,
    );
    if (error.response) {
      //console.error("Response Status:", error.response.status);
      //console.error("Response Headers:", error.response.headers);
    }
    return "Xin l·ªói l√£o phu kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa ƒë·∫°o h·ªØu ngay b√¢y gi·ªù.";
  }
}

bot.on("guildMemberAdd", async (member) => {
  const channel = member.guild.channels.cache.get("1309892182483931169");
  if (channel) {
    channel.send(
      `üéâ Ch√†o m·ª´ng ƒë·∫°o h·ªØu ${member.displayName} ƒë·∫øn v·ªõi t√¥ng m√¥n!`,
    );
  }
});

async function checkMissedMessages() {
  const reportChannel = await bot.channels.fetch(REPORT_CHANNEL_ID);
  if (!reportChannel) return;

  for (const channelId of ALLOWED_CHANNELS) {
    const channel = await bot.channels.fetch(channelId).catch(() => null);
    if (!channel) continue;

    // üîç L·∫•y 10 tin g·∫ßn nh·∫•t ƒë·ªÉ t√¨m tin bot ph·∫£n h·ªìi g·∫ßn nh·∫•t
    const recentMessages = await channel.messages
      .fetch({ limit: 10 })
      .catch(() => null);
    if (!recentMessages) continue;

    // üßê T√¨m tin nh·∫Øn bot ph·∫£n h·ªìi g·∫ßn nh·∫•t
    let lastBotMessage = recentMessages.find(
      (m) => m.author.id === bot.user.id,
    );
    let lastBotMessageTimestamp = lastBotMessage
      ? lastBotMessage.createdTimestamp
      : 0;

    // üìå N·∫øu bot ch∆∞a t·ª´ng ph·∫£n h·ªìi, ch·ªâ l·∫•y 10 tin g·∫ßn nh·∫•t (tr√°nh qu√©t qu√° nhi·ªÅu)
    let messages = await channel.messages
      .fetch({ limit: 50 })
      .catch(() => null);
    if (!messages) continue;

    // üî• Ch·ªâ l·∫•y tin m·ªõi h∆°n tin bot ƒë√£ ph·∫£n h·ªìi g·∫ßn nh·∫•t
    messages = messages.filter(
      (m) => m.createdTimestamp > lastBotMessageTimestamp,
    );

    for (const msg of messages.values()) {
      if (msg.author.bot) continue;

      const replied = messages.some(
        (m) => m.reference?.messageId === msg.id || m.mentions.has(bot.user.id),
      );
      if (replied) continue;

      const member = await msg.guild.members
        .fetch(msg.author.id)
        .catch(() => null);
      const nickname = member?.displayName || msg.author.username;

      const shouldReply =
        greetings.includes(msg.content.toLowerCase()) ||
        msg.content.startsWith(`${PREFIX}ans`);
      if (!shouldReply) continue;

      // üöÄ B√°o c√°o tin nh·∫Øn b·ªã l·ª°
      // await reportChannel.send(`üì¢ **${nickname} ƒë√£ g·ª≠i ·ªü #${msg.channel.name}:** "${msg.content}"`);
      const timeSent = msg.createdAt.toLocaleString("vi-VN"); // ƒê·ªãnh d·∫°ng th·ªùi gian theo ti·∫øng Vi·ªát
      await reportChannel.send(
        `üì¢ **${nickname} ƒë√£ g·ª≠i ·ªü #${msg.channel.name} l√∫c ${timeSent}:** "${msg.content}"`,
      );

      // Ph·∫£n h·ªìi tin nh·∫Øn b·ªã l·ª° ngay d∆∞·ªõi b√°o c√°o
      if (greetings.includes(msg.content.toLowerCase())) {
        await reportChannel.send(`Xin ch√†o ${nickname} ƒë·∫°o h·ªØu!`);
      } else if (msg.content.startsWith(`${PREFIX}ans`)) {
        const args = msg.content.slice(PREFIX.length).trim().split(/ +/);
        args.shift();
        const query = args.join(" ").trim().toLowerCase();

        if (!query) {
          await reportChannel.send(
            "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a. V√≠ d·ª•: `d?ans bot`",
          );
          continue;
        }

        const questions = loadQuestions();
        const matches = findMatches(query, questions);

        if (matches.length > 0) {
          let response = `üîç **C√°c k·∫øt qu·∫£ cho "${query}":**\n`;
          matches.forEach((q, index) => {
            response += `\n**${index + 1}.** ‚ùì ${q["C√¢u h·ªèi"]}\n‚û°Ô∏è ${q["C√¢u tr·∫£ l·ªùi"]}\n`;
          });
          await reportChannel.send(response);
        } else {
          await reportChannel.send(
            "‚ùå T√¥i ƒë√£ c·ªë g·∫Øng m√† kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi tr√πng kh·ªõp. ${nickname} ƒë·∫°o h·ªØu c√≥ th·ªÉ li√™n h·ªá M·∫°nh K·ª≥ ƒë·∫°o h·ªØu!",
          );
        }
      }
    }
  }
}

bot.on("messageCreate", async (message) => {
  if (message.author.bot) return; // B·ªè qua tin nh·∫Øn t·ª´ bot kh√°c

  const args = message.content.slice(PREFIX.length).trim().split(/ +/);
  const command = args.shift()?.toLowerCase() || "";
  const nickname = message.member?.displayName || message.author.username;
  const content = message.content.trim().toLowerCase(); // Chu·∫©n h√≥a n·ªôi dung tin nh·∫Øn

  // üìå Ki·ªÉm tra l·ªùi ch√†o (n·∫øu tin nh·∫Øn kh√¥ng ph·∫£i l·ªánh)
  if (greetings.includes(content)) {
    message.channel.send(`Xin ch√†o ${nickname} ƒë·∫°o h·ªØu!`);
    return;
  }

  // üìå Ch·ªâ x·ª≠ l√Ω c√°c l·ªánh b·∫Øt ƒë·∫ßu b·∫±ng PREFIX
  if (!message.content.startsWith(PREFIX)) return;

  switch (command) {
    // üìå L·ªánh h·ªèi ƒë√°p theo Excel
    case "a": {
      const query = args.join(" ").trim();
      if (!query)
        return message.channel.send(
          "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a. V√≠ d·ª•: `d?a bot`",
        );

      const matches = findMatches(query, loadQuestions());
      if (matches.length > 0) {
        let response = `üîç **C√°c k·∫øt qu·∫£ cho "${query}":**\n`;
        matches.forEach((q, index) => {
          response += `\n**${index + 1}.** ‚ùì ${q["C√¢u h·ªèi"]}\n‚û°Ô∏è ${q["C√¢u tr·∫£ l·ªùi"]}\n`;
        });
        message.channel.send(response);
      } else {
        message.channel.send(
          `‚ùå Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ph√π h·ª£p, ${nickname} ƒë·∫°o h·ªØu vui l√≤ng ki·ªÉm tra l·∫°i`,
        );
      }
      break;
    }
    // üìå L·ªánh h·ªèi AI
    case "r": {
      if (!canUseCommand(message.author.id)) {
        return message.reply("‚è≥ ƒê·∫°o h·ªØu ƒëang g·ª≠i qu√° nhanh! H√£y ch·ªù 5 gi√¢y.");
      }

      const query = args.join(" ");
      if (!query)
        return message.reply("‚ö†Ô∏è ƒê·∫°o h·ªØu vui l√≤ng nh·∫≠p n·ªôi dung c√¢u h·ªèi!");

      const reply = await chatWithGemini(query);
      message.reply(reply);
      break;
    }

    default:
      message.channel.send("‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá! H√£y th·ª≠ `d?a` ho·∫∑c `d?r`");
  }
});

bot.once("ready", async () => {
  console.log("Bot is now online!");
  //checkMissedMessages();
});

//bot.login(config.token);

keepAlive()
bot.login(process.env.DISCORD_TOKEN); // S·ª≠ d·ª•ng token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
