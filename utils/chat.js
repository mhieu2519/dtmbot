require('dotenv').config();
const axios = require("axios"); // Th√™m axios n·∫øu ch∆∞a c√†i ƒë·∫∑t
const geminiApiKey = process.env["gemini_api_key"]; // S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng

async function chatWithGemini(prompt) {
    try {
      const response = await axios.post(
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        {
          contents: [
            {
              parts: [
                {
                  text: prompt,
                },
              ],
            },
          ],
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
          params: {
            key: geminiApiKey,
          },
        },
      );
  
      //console.log("Response Data:", response.data);
  
      const reply = response.data;
  
      // Ki·ªÉm tra v√† truy c·∫≠p ch√≠nh x√°c v√†o n·ªôi dung ph·∫£n h·ªìi
      if (
        !reply ||
        !reply.candidates ||
        !reply.candidates[0] ||
        !reply.candidates[0].content ||
        !reply.candidates[0].content.parts ||
        !reply.candidates[0].content.parts[0] ||
        !reply.candidates[0].content.parts[0].text
      ) {
        console.error(
          "L·ªói: Google Gemini kh√¥ng tr·∫£ v·ªÅ n·ªôi dung ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng ƒë√∫ng.",
        );
        //console.error("Full Response:", JSON.stringify(response.data, null, 2));
        return "Xin l·ªói l√£o phu kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa ƒë·∫°o h·ªØu ngay b√¢y gi·ªù.";
      }
  
      let content = reply.candidates[0].content.parts[0].text; // L·∫•y n·ªôi dung ph·∫£n h·ªìi
      // Thay th·∫ø "t√¥i" b·∫±ng "l√£o phu"
      content = content.replace(/t√¥i/gi, "l√£o phu");
  
      // Thay th·∫ø "b·∫°n" b·∫±ng "ƒë·∫°o h·ªØu"
      content = content.replace(/b·∫°n/gi, "ƒë·∫°o h·ªØu");
  
      return content;
    } catch (error) {
      console.error(
        " L·ªói t·ª´ Google Gemini:",
        error.response ? error.response.data : error.message,
      );
      if (error.response) {
        //console.error("Response Status:", error.response.status);
        //console.error("Response Headers:", error.response.headers);
      }
      return "Xin l·ªói l√£o phu kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa ƒë·∫°o h·ªØu ngay b√¢y gi·ªù.";
    }
}


async function sendMessageInChunks(message, content) {
  const chunkSize = 1975; // Discord gi·ªõi h·∫°n 2000 k√Ω t·ª± m·ªói tin
  const chunks = [];
  
  while (content.length > 0) {
    let chunk = content.slice(0, chunkSize);
    content = content.slice(chunkSize);
    
    // Th√™m d·∫•u "... c√≤n ti·∫øp" v√†o cu·ªëi ƒëo·∫°n b·ªã c·∫Øt n·∫øu c√≤n ph·∫ßn ti·∫øp theo
    if (content.length > 0) {
      chunk += " ... c√≤n ti·∫øp";
    }

    chunks.push(chunk);
  }

  let lastSentMessage = null;

  for (let i = 0; i < chunks.length; i++) {
    if (i === 0) {
      // ƒêo·∫°n ƒë·∫ßu ti√™n reply v√†o tin g·ªëc
      lastSentMessage = await message.reply(chunks[i]);
    } else {
      // C√°c ƒëo·∫°n ti·∫øp theo reply v√†o ƒëo·∫°n tr∆∞·ªõc ƒë√≥ ƒë·ªÉ t·∫°o chu·ªói li√™n k·∫øt
      lastSentMessage = await lastSentMessage.reply(chunks[i]);
    }
  }
}

async function handleReplyToBot(message, lastRequestTime, conversationHistory) {
  const lastTime = lastRequestTime.get(message.author.id) || 0;
  const now = Date.now();
  
  if (now - lastTime < REPLY_COOLDOWN) {
    return message.reply("‚è≥ ƒê·∫°o h·ªØu ƒë·ª£i m·ªôt ch√∫t, ta ƒëang suy nghƒ©...");
  }

  lastRequestTime.set(message.author.id, now);

  try {
    const referencedMessage = await message.channel.messages.fetch(message.reference.messageId);

    // N·∫øu tin nh·∫Øn g·ªëc l√† c·ªßa bot
    if (referencedMessage.author.id === message.client.user.id) {
      const query = message.content.trim();
      if (!query) return message.reply("ü§î ƒê·∫°o h·ªØu mu·ªën h·ªèi g√¨?");

      // L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i (n·∫øu c√≥)
      const contextKey = referencedMessage.id;
      let contextHistory = conversationHistory.get(contextKey) || [];

      // Th√™m tin nh·∫Øn c≈© v√†o ng·ªØ c·∫£nh
      contextHistory.push(referencedMessage.content);

      // Gi·ªõi h·∫°n s·ªë c√¢u h·ªôi tho·∫°i
      if (contextHistory.length > MAX_CONTEXT_MESSAGES) {
        contextHistory.shift(); // X√≥a c√¢u c≈© nh·∫•t
      }

      // Ghi ƒë√® l·∫°i l·ªãch s·ª≠ h·ªôi tho·∫°i
      conversationHistory.set(contextKey, contextHistory);

      // Gh√©p ng·ªØ c·∫£nh l·∫°i th√†nh prompt
      const prompt = contextHistory.join("\n") + `\nUser: ${query}`;
      const reply = await chatWithGemini(prompt);

      // G·ª≠i ph·∫£n h·ªìi
      await sendMessageInChunks(message, reply);
    }
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi:", error);
  }
}



module.exports= { chatWithGemini, sendMessageInChunks, handleReplyToBot };


