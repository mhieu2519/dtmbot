// utils/useInventory.js
const {
  MessageFlags,
  ActionRowBuilder,
  StringSelectMenuBuilder
} = require('discord.js');

const usableItems = require('../shops/usableItems');
const UserXP = require('../models/UserXP');
const { removeItemFromInventory } = require('./inventory');
const { addXP } = require('./xpSystem');
const BuffClasses = require('../buffs'); // mapping buffName => class

// üéØ Th√™m buff m·ªõi (kh√¥ng g·ªôp, cho ph√©p nhi·ªÅu buff c√πng effect nh∆∞ng kh√°c value)
async function addBuff(user, effect, value, duration) {
  user.activeBuffs = user.activeBuffs || [];

  // Ki·ªÉm tra xem c√≥ buff gi·ªëng h·ªát (effect + value) ch∆∞a
  const existing = user.activeBuffs.find(b => b.effect === effect && b.value === value);

  if (existing) {
    // N·∫øu ƒë√£ c√≥ c√πng effect + value -> ch·ªâ c·ªông th√™m duration (stack)
    existing.duration += duration;
  } else {
    // N·∫øu kh√°c value -> push th√†nh buff m·ªõi
    user.activeBuffs.push({ effect, value, duration });
  }

  // S·∫Øp x·∫øp l·∫°i: buff m·∫°nh h∆°n ƒë·ª©ng tr∆∞·ªõc
  user.activeBuffs.sort((a, b) => b.value - a.value);

  await user.save();
}


// ü©∏ Giao di·ªán ch·ªçn v·∫≠t ph·∫©m ƒë·ªÉ d√πng
async function handleUseItem(interaction) {
  const userId = interaction.user.id;
  const guildId = interaction.guild.id;
  const user = await UserXP.findOne({ userId, guildId });

  const usableInInventory = user.inventory.filter(item =>
    usableItems.find(u => u.id === item.itemId)
  );

  if (usableInInventory.length === 0) {
    return interaction.reply({
      content: 'üì≠ ƒê·∫°o h·ªØu kh√¥ng c√≥ v·∫≠t ph·∫©m n√†o c√≥ th·ªÉ s·ª≠ d·ª•ng.',
      flags: MessageFlags.Ephemeral
    });
  }

  const options = usableInInventory.map(item => {
    const info = usableItems.find(i => i.id === item.itemId);
    return {
      label: `${info.name} x${item.quantity}`,
      description: info.description,
      value: `use::${item.itemId}`
    };
  });

  const row = new ActionRowBuilder().addComponents(
    new StringSelectMenuBuilder()
      .setCustomId('select_use_item')
      .setPlaceholder('üîç Ch·ªçn v·∫≠t ph·∫©m ƒë·ªÉ s·ª≠ d·ª•ng')
      .addOptions(options)
  );

  return interaction.reply({
    content: 'üîß Ch·ªçn v·∫≠t ph·∫©m ƒë·∫°o h·ªØu mu·ªën s·ª≠ d·ª•ng:',
    components: [row],
    flags: MessageFlags.Ephemeral
  });
}

// üßÆ Ch·ªçn s·ªë l∆∞·ª£ng
async function handleUseItemSelection(interaction) {
  const userId = interaction.user.id;
  const guildId = interaction.guild.id;
  const user = await UserXP.findOne({ userId, guildId });

  const [_, itemId] = interaction.values[0].split('::');
  const item = usableItems.find(i => i.id === itemId);
  const invItem = user.inventory.find(i => i.itemId === itemId);

  const maxQuantity = Math.min(invItem.quantity, 25);

  const row = new ActionRowBuilder().addComponents(
    new StringSelectMenuBuilder()
      .setCustomId(`confirm_use_quantity`)
      .setPlaceholder('üßÆ Ch·ªçn s·ªë l∆∞·ª£ng mu·ªën s·ª≠ d·ª•ng')
      .addOptions(
        Array.from({ length: maxQuantity }, (_, i) => ({
          label: `${i + 1}`,
          value: `use::${itemId}::${i + 1}`
        }))
      )
  );

  return interaction.update({
    content: `ü©∏ ƒê·∫°o h·ªØu mu·ªën s·ª≠ d·ª•ng bao nhi√™u **${item.name}**?`,
    components: [row]
  });
}

// ‚úÖ Th·ª±c hi·ªán khi ng∆∞·ªùi d√πng x√°c nh·∫≠n s·ª≠ d·ª•ng
async function handleUseItemConfirm(interaction, itemId, quantity) {
  const userId = interaction.user.id;
  const guildId = interaction.guild.id;
  const user = await UserXP.findOne({ userId, guildId });
  const itemInfo = usableItems.find(i => i.id === itemId);

  if (!itemInfo) {
    return interaction.reply({
      content: `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m.`,
      flags: MessageFlags.Ephemeral
    });
  }

  // Tr·ª´ kh·ªèi t√∫i ƒë·ªì
  await removeItemFromInventory(user, itemId, quantity);

  let effectResultText = '';

  if (typeof itemInfo.effect === 'object' && itemInfo.effect.type) {
    // ‚ö° L√† buff
    const BuffClass = BuffClasses[itemInfo.effect.type];
    if (!BuffClass) {
      return interaction.reply({
        content: `‚ö†Ô∏è Buff '${itemInfo.effect.type}' ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£.`,
        flags: MessageFlags.Ephemeral
      });
    }

    // √Åp d·ª•ng buff
    await addBuff(user, itemInfo.effect.type, itemInfo.effect.value, itemInfo.effect.duration * quantity);

    const tempBuff = new BuffClass(itemInfo.effect);
    effectResultText = `üß™ Nh·∫≠n buff **${tempBuff.name}**: ${tempBuff.description || `+${tempBuff.value}`}.\n` +
      `‚è≥ K√©o d√†i ${itemInfo.effect.duration * quantity} l∆∞·ª£t.`;
  } else {
    // ‚≠ê L√† item th∆∞·ªùng
    switch (itemInfo.effect) {
      case 'gainExp':
        const xp = itemInfo.amount * quantity;
        await addXP(userId, guildId, xp, interaction.client);
        effectResultText = `‚ú® Nh·∫≠n ${xp} XP.`;
        break;

      case 'gainStone':
        const stones = itemInfo.amount * quantity;
        user.stone = (user.stone || 0) + stones;
        await user.save();
        effectResultText = `üíé Nh·∫≠n ${stones} linh th·∫°ch.`;
        break;

      default:
        effectResultText = `‚ö†Ô∏è Hi·ªáu ·ª©ng ch∆∞a h·ªó tr·ª£: ${itemInfo.effect}`;
        break;
    }
  }

  // Th√¥ng b√°o ra channel (n·∫øu c√≥)
  try {
    const member = await interaction.guild.members.fetch(userId);
    const displayName = member.displayName;
    const channel = await interaction.client.channels.fetch(process.env.LEVELUP_CHANNEL_ID);

    if (channel) {
      await channel.send(`‚úÖ ƒê·∫°o h·ªØu **${displayName}** ƒë√£ s·ª≠ d·ª•ng **${itemInfo.name} x${quantity}**.\n${effectResultText}`);
    }
  } catch (err) {
    console.warn('Kh√¥ng g·ª≠i ƒë∆∞·ª£c th√¥ng b√°o s·ª≠ d·ª•ng v·∫≠t ph·∫©m:', err.message);
  }

  return interaction.update({
    content: `‚úÖ ƒê·∫°o h·ªØu ƒë√£ s·ª≠ d·ª•ng **${itemInfo.name} x${quantity}**.\n${effectResultText}`,
    components: []
  });
}

module.exports = {
  handleUseItem,
  handleUseItemSelection,
  handleUseItemConfirm
};
